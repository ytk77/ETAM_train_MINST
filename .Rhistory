library(dplyr)
library(Rcpp)
library(doMC)
sourceCpp("fnc_ETAM_a_neuron.cpp")
source("load_MNIST.R")
source("fnc_Process.R")
registerDoMC(24)
X.train = load_image_file("data/train-images-idx3-ubyte") %>% as.matrix()
y1 = load_label_file("data/train-labels-idx1-ubyte")
Y.train = matrix(0, nrow(X.train), n_distinct(y1))
for (ii in 1:length(y1)) {
Y.train[ii, y1[ii]+1] = 1
}
# names(X.y) = paste0("y=", seq(0,9))
XY.train = cbind(X.train, Y.train) %>% fnc_hardlim()
ii= 275
w1 = cpp_ETAM_learn_a_neuron(XY.train, ii, 0.0001)
w1
x = c(XY.train[847, ], -1)
w1 %*% x
x[ii]
x[ii-1]
x[ii+1]
w1 = cpp_ETAM_learn_a_neuron(XY.train, ii, 0.00002)
w1 %*% x
library(dplyr)
library(Rcpp)
library(doMC)
library(tictoc)
sourceCpp("fnc_ETAM_a_neuron.cpp")
source("load_MNIST.R")
source("fnc_Process.R")
registerDoMC(24)
X.train = load_image_file("data/train-images-idx3-ubyte") %>% as.matrix()
y1 = load_label_file("data/train-labels-idx1-ubyte")
Y.train = matrix(0, nrow(X.train), n_distinct(y1))
for (ii in 1:length(y1)) {
Y.train[ii, y1[ii]+1] = 1
}
# # names(X.y) = paste0("y=", seq(0,9))
XY.train = cbind(X.train, Y.train) %>% fnc_hardlim()
## check training accuracy
fn <- "result/mnist_W_2019-02-11 02:45:18.rds"
W <- readRDS(fn)
# X1 = XY.train %>% fnc_hardlim()
x1 = head(XY.train, 1000)
# X1b = cbind(XY.train, -1)
X1b = cbind(x1, -1)
for (ii in 1:10) {
tic()
y0 = W %*% t(X1b)
y1 = fnc_hardlim( t(y0) )
X1b = cbind(y1, -1)
toc()
print( sum( abs(x1 - y1)) )
}
D1 = abs(x1 - y1)
d2 = rowSums(D1)
which(d2 != 0)
dim(D1)
dd = D1[251, ]
dd
which(dd!=0)
aa = 251;   bb=515
v1 = W %*% x1[aa, ]
v1 = W %*% t( x1[aa, ] )
dim(W)
dim(x1)
v1 = W %*% t( X1b[aa, ] )
source('~/WorkFiles@remote/my_hobby/ML/201902_ETAM/dev_etam_v2.R', echo=TRUE)
library(dplyr)
library(Rcpp)
library(doMC)
library(tictoc)
sourceCpp("fnc_ETAM_a_neuron.cpp")
source("load_MNIST.R")
source("fnc_Process.R")
registerDoMC(24)
X.train = load_image_file("data/train-images-idx3-ubyte") %>% as.matrix()
y1 = load_label_file("data/train-labels-idx1-ubyte")
Y.train = matrix(0, nrow(X.train), n_distinct(y1))
for (ii in 1:length(y1)) {
Y.train[ii, y1[ii]+1] = 1
}
# # names(X.y) = paste0("y=", seq(0,9))
XY.train = cbind(X.train, Y.train) %>% fnc_hardlim()
## check training accuracy
fn <- "result/mnist_W_2019-02-13 00:20:58.rds"
W <- readRDS(fn)
# X1 = XY.train %>% fnc_hardlim()
x1 = head(XY.train, 1000)
# X1b = cbind(XY.train, -1)
X1b = cbind(x1, -1)
for (ii in 1:10) {
tic()
y0 = W %*% t(X1b)
y1 = fnc_hardlim( t(y0) )
X1b = cbind(y1, -1)
toc()
print( sum( abs(x1 - y1)) )
}
# show_digit( head(X1b[1,],784) )
